stages:
    - build
    - deploy

variables:
    IMAGE_BUILDER: $CI_REGISTRY_IMAGE:builder
    IMAGE_COMMIT: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    IMAGE_LATEST: $CI_REGISTRY_IMAGE:latest

.prepare: &prepare
    before_script:
        - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin

.cleanup: &cleanup
    after_script:
        - docker image prune -a -f

.retry: &retry
    interruptible: true
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure

docker-build:
    stage: build
    <<: *prepare
    <<: *cleanup
    <<: *retry
    script:
        - docker pull $IMAGE_BUILDER || true
        - docker pull $IMAGE_COMMIT || true
        - docker pull $IMAGE_LATEST || true

        - docker build --cache-from $IMAGE_BUILDER --target builder --tag $IMAGE_BUILDER .
        - docker build --cache-from $IMAGE_LATEST --cache-from $IMAGE_BUILDER --tag $IMAGE_COMMIT --tag $IMAGE_LATEST .

        - docker push $IMAGE_BUILDER
        - docker push $IMAGE_COMMIT
        - docker push $IMAGE_LATEST
    tags:
        - docker-build
    only:
        - master

.deploy: &deploy
    stage: deploy
    <<: *prepare
    <<: *cleanup
    <<: *retry
    script:
        - cp env/$CI_ENVIRONMENT_NAME.env .env
        - docker-compose pull
        - docker-compose down --remove-orphans
        - docker-compose up -d
    tags:
        - ewms-vps, medmarka-vps
    only:
        - master

deploy-ci:
    <<: *deploy
    environment:
        name: ci
        url: https://ci.hekimbaba.com

deploy-staging:
    <<: *deploy
    environment:
        name: staging
        url: https://staging.hekimbaba.com
    when: manual

deploy-prod:
    <<: *deploy
    environment:
        name: production
        url: https://hekimbaba.com
    when: manual
